@page "/settings"
@using System.Globalization
@using System.Runtime.InteropServices
@using System.Reflection
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SettingsPage> Loc
@inject NavigationManager Navigation

<TableContentsView>
    <PageHeader Title="@Loc["TitleText"]" />

    <FluentStack Orientation="Orientation.Vertical">
        <SettingsGroup>
            <Header>
                <h2 id="display" class="unset">@Loc["DisplayGroupHeader"]</h2>
            </Header>
            <ChildContent>
                <SettingsCard>
                    <Icon>
                        <FluentIcon Value="new Icons.Regular.Size20.Color()" />
                    </Icon>
                    <Header>
                        <h3 id="display-theme" class="unset">@Loc["ThemeSettingsHeader"]</h3>
                    </Header>
                    <Description>
                        @Loc["ThemeSettingsDescription"]
                    </Description>
                    <ActionContent>
                        <FluentDesignTheme @bind-Mode="mode" StorageName="theme" />
                        <FluentSelect Width="auto"
                                      Items="Enum.GetValues<DesignThemeModes>()"
                                      @bind-SelectedOption="mode">
                            <OptionTemplate>
                                @Loc[context.ToString()]
                            </OptionTemplate>
                        </FluentSelect>
                    </ActionContent>
                </SettingsCard>

                <SettingsCard>
                    <Icon>
                        <FluentIcon Value="new Icons.Regular.Size20.LocalLanguage()" />
                    </Icon>
                    <Header>
                        <h3 id="display-language" class="unset">@Loc["LanguageSettingsHeader"]</h3>
                    </Header>
                    <Description>
                        @Loc["LanguageSettingsDescription"]
                    </Description>
                    <ActionContent>
                        <FluentSelect Width="auto"
                                      Items="LanguageHelper.SupportCultures"
                                      @bind-SelectedOption="SelectedLanguage">
                            <OptionTemplate>
                                @context.DisplayName
                            </OptionTemplate>
                        </FluentSelect>
                    </ActionContent>
                </SettingsCard>
            </ChildContent>
        </SettingsGroup>

        <SettingsGroup>
            <Header>
                <h2 id="configs" class="unset">@Loc["ConfigsGroupHeader"]</h2>
            </Header>
            <ChildContent>
                <SettingsCard>
                    <Icon>
                        <FluentIcon Value="new Icons.Regular.Size20.ArrowReset()" />
                    </Icon>
                    <Header>
                        <h3 id="configs-reset" class="unset">@Loc["ResetSettingsHeader"]</h3>
                    </Header>
                    <Description>
                        @Loc["ResetSettingsDescription"]
                    </Description>
                    <ActionContent>
                        <FluentButton Id="configs-reset-button" OnClick="() => flyout = !flyout">
                            @Loc["ResetSettingsButton"]
                        </FluentButton>
                        <FluentPopover AnchorId="configs-reset-button"
                                       Style="width: 250px;"
                                       @bind-Open="flyout">
                            <Header>
                                @Loc["ResetSettingsTitle"]
                            </Header>
                            <Footer>
                                <FluentButton OnClick="ResetAsync">
                                    @Loc["ResetSettingsConfirm"]
                                </FluentButton>
                            </Footer>
                        </FluentPopover>
                    </ActionContent>
                </SettingsCard>

                <SettingsExpander>
                    <Icon>
                        <FluentIcon Value="new Icons.Regular.Size20.DeveloperBoard()" />
                    </Icon>
                    <Header>
                        <h3 id="configs-framework" class="unset">@Loc["FrameworkSettingsHeader"]</h3>
                    </Header>
                    <Description>
                        @Loc["FrameworkSettingsDescription"]
                    </Description>
                    <ChildContent>
                        <div class="setting-expander-content-grid">
                            <table class="info-table">
                                <tr>
                                    <td>@Loc["FrameworkText"]</td>
                                    <td class="info-table-description">@RuntimeInformation.FrameworkDescription</td>
                                </tr>
                                <tr>
                                    <td>Blazor</td>
                                    <td class="info-table-description">@typeof(ComponentBase).Assembly.GetName().Version.ToString(3)</td>
                                </tr>
                                <tr>
                                    <td>Fluent UI</td>
                                    <td class="info-table-description">@typeof(FluentComponentBase).Assembly.GetName().Version</td>
                                </tr>
                                <tr>
                                    <td>@Loc["OSPlatformText"]</td>
                                    <td class="info-table-description">@RuntimeInformation.OSDescription</td>
                                </tr>
                                <tr>
                                    <td>@Loc["OSArchitectureText"]</td>
                                    <td class="info-table-description">@RuntimeInformation.OSArchitecture</td>
                                </tr>
                            </table>
                        </div>
                    </ChildContent>
                </SettingsExpander>
            </ChildContent>
        </SettingsGroup>

        <SettingsGroup>
            <Header>
                <h2 id="about" class="unset">@Loc["AboutGroupHeader"]</h2>
            </Header>
            <ChildContent>
                <SettingsExpander>
                    <Icon>
                        <FluentIcon Value="new Icons.Regular.Size20.Info()" />
                    </Icon>
                    <Header>
                        <h3 id="about-about" class="unset">@(typeof(App).Assembly?.GetName() is AssemblyName name ? $"{name.Name} v{name.Version.ToString(3)}" : "Wherlog")</h3>
                    </Header>
                    <Description>
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
                            <span>魔法薇ㄦ的书馆网页客户端</span>
                            <FluentStack HorizontalGap="4" Style="overflow-x: auto;">
                                <a class="text-button" href="https://github.com/wherewhere/wherlog/issues" target="_blank">@Loc["FeedbackLink"]</a>
                                <a class="text-button" href="https://github.com/wherewhere/wherlog/discussions" target="_blank">@Loc["DiscussionsLink"]</a>
                                <a class="text-button" href="@baseUrl" target="_blank">魔法薇ㄦ的书馆</a>
                            </FluentStack>
                        </FluentStack>
                    </Description>
                    <ChildContent>
                        <div class="setting-expander-content-grid">
                            <h4>欢迎使用 Wherlog！</h4>
                            <h5>声明</h5>
                            <ol>
                                <li>本程序是 <a href="https://github.com/wherewhere/wherewhere.github.io" target="_blank">魔法薇ㄦ的书馆</a> 的网页客户端，禁止用于商业用途。</li>
                                <li>本程序是开源软件，因此，在使用时请确保程序是来自<a href="https://github.com/wherewhere/wherlog" target="_blank">本 Github 仓库</a>，以确保您的数据安全。</li>
                                <li>若程序来源无异常，程序运行过程中您的所有数据都仅用于与 <a href="@baseUrl" target="_blank">魔法薇ㄦ的书馆</a> 的服务器交流或储存于本地，开发者不会窃取您的任何数据。但即便如此，也请注意使用环境的安全性。</li>
                            </ol>
                            <h5>参与人员</h5>
                            <p>
                                <a href="https://github.com/Coolapk-UWP/Coolapk-Lite/graphs/contributors" title="Contributors" target="_blank">
                                    <img src="https://contrib.rocks/image?repo=Coolapk-UWP/Coolapk-Lite" alt="Contributors" target="_blank">
                                </a>
                            </p>
                            <h5>引用及参考</h5>
                            <ul>
                                <li><a href="https://github.com/xoofx/markdig" title="Markdig" target="_blank">Markdig</a></li>
                                <li><a href="https://github.com/microsoft/fluentui-blazor" title="Fluent UI Blazor" target="_blank">Fluent UI Blazor</a></li>
                            </ul>
                        </div>
                    </ChildContent>
                </SettingsExpander>

                <SettingsCard>
                    <Icon>
                        <FluentIcon Value="new Icons.Regular.Size20.ContactCard()" />
                    </Icon>
                    <Header>
                        <h3 id="about-contact" class="unset">@Loc["ContactMeSettingsHeader"]</h3>
                    </Header>
                    <Description>
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
                            <span>@Loc["ContactMeText"]</span>
                            <FluentStack HorizontalGap="4" Style="overflow-x: auto;">
                                <a class="text-button" href="https://github.com/wherewhere" target="_blank">GitHub</a>
                                <a class="text-button" href="http://www.coolapk.com/u/536381" target="_blank">Coolapk</a>
                                <a class="text-button" href="https://twitter.com/wherewhere7" target="_blank">Twitter</a>
                                <a class="text-button" href="https://space.bilibili.com/266112738" target="_blank">哔哩哔哩</a>
                            </FluentStack>
                        </FluentStack>
                    </Description>
                    <ActionContent>
                        <FluentAnchor Href="https://t.me/PavingBase">
                            @Loc["JoinGroup"]
                        </FluentAnchor>
                    </ActionContent>
                </SettingsCard>

                <SettingsCard>
                    <Icon>
                        <FluentIcon Value="new Icons.Regular.Size20.Heart()" />
                    </Icon>
                    <Header>
                        <h3 id="about-donate" class="unset">@Loc["DonateSettingsHeader"]</h3>
                    </Header>
                    <Description>
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
                            <span>@Loc["DonateText"]</span>
                            <FluentStack HorizontalGap="4" Style="overflow-x: auto;">
                                <a class="text-button" href="@("https://afdian.com/@wherewhere")" target="_blank">爱发电</a>
                                <a class="text-button" href="https://patreon.com/wherewhere" target="_blank">Patreon</a>
                            </FluentStack>
                        </FluentStack>
                    </Description>
                </SettingsCard>
            </ChildContent>
        </SettingsGroup>

        <SettingsGroup>
            <Header>
                <h2 id="others" class="unset">@Loc["OthersGroupHeader"]</h2>
            </Header>
            <ChildContent>
                <SettingsButton OnClick="@(() => Navigation.NavigateTo("tools"))">
                    <Icon>
                        <FluentIcon Value="new Icons.Regular.Size20.Toolbox()" />
                    </Icon>
                    <Header>
                        <h3 id="others-tools" class="unset">@Loc["ToolsSettingsHeader"]</h3>
                    </Header>
                    <Description>
                        @Loc["ToolsSettingsDescription"]
                    </Description>
                    <ActionIcon>
                        <FluentIcon Value="new Icons.Regular.Size12.ChevronRight()" Color="Color.FillInverse" />
                    </ActionIcon>
                </SettingsButton>

                <SettingsCard>
                    <Icon>
                        <FluentIcon Value="new Icons.Regular.Size20.Navigation()" />
                    </Icon>
                    <Header>
                        <h3 id="others-navigate" class="unset">@Loc["NavigateSettingsHeader"]</h3>
                    </Header>
                    <Description>
                        @Loc["NavigateSettingsDescription"]
                    </Description>
                    <ActionContent>
                        <FluentStack HorizontalAlignment="HorizontalAlignment.Right" Style="max-width: var(--settings-card-content-min-width);">
                            <FluentTextField Placeholder="@Loc["NavigateSettingsInput"]"
                                             Style="flex: 1;"
                                             @bind-Value="path" />
                            <FluentButton OnClick="() => Navigation.NavigateTo(path ?? string.Empty)">
                                @Loc["NavigateSettingsButton"]
                            </FluentButton>
                        </FluentStack>
                    </ActionContent>
                </SettingsCard>

                <SettingsCard>
                    <Icon>
                        <FluentIcon Value="new Icons.Regular.Size20.Database()" />
                    </Icon>
                    <Header>
                        <h3 id="others-source" class="unset">@Loc["SourceSettingsHeader"]</h3>
                    </Header>
                    <Description>
                        @Loc["SourceSettingsDescription"]
                    </Description>
                    <ActionContent>
                        <FluentStack HorizontalAlignment="HorizontalAlignment.Right" Style="max-width: var(--settings-card-content-min-width);">
                            <FluentTextField Placeholder="@Loc["NavigateSettingsInput"]"
                                             Style="flex: 1;"
                                             @bind-Value="baseUrl" />
                            <FluentButton OnClick="SetBaseUrlAsync">
                                @Loc["SourceSettingsButton"]
                            </FluentButton>
                        </FluentStack>
                    </ActionContent>
                </SettingsCard>
            </ChildContent>
        </SettingsGroup>
    </FluentStack>
</TableContentsView>

@code
{
    private DesignThemeModes mode;
    private string path;
    private bool flyout;

    private CultureInfo culture;
    private CultureInfo SelectedLanguage
    {
        get => culture;
        set
        {
            if (culture != value)
            {
                culture = value;
                _ = SetLanguageAsync(value);
            }
        }
    }

    private string baseUrl;

    protected override async Task OnParametersSetAsync()
    {
        string lang = await App.SettingsHelper.GetAsync<string>(SettingsHelper.CurrentLanguage);
        if (lang == LanguageHelper.AutoLanguageCode)
        {
            lang = LanguageHelper.GetCurrentLanguage();
        }
        culture = new CultureInfo(lang);
        baseUrl = await App.SettingsHelper.GetAsync<string>(SettingsHelper.BaseUrl);
    }

    private async Task SetLanguageAsync(CultureInfo culture)
    {
        if (culture?.Name.Equals(await LanguageHelper.GetLanguageCodeAsync(JSRuntime), StringComparison.OrdinalIgnoreCase) == false)
        {
            CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.DefaultThreadCurrentCulture = culture;
            await App.SettingsHelper.SetAsync(SettingsHelper.CurrentLanguage, culture.Name);
            await LanguageHelper.SetLanguageCodeAsync(LanguageHelper.GetCurrentLanguage().ToLowerInvariant(), JSRuntime);
        }
    }

    private async Task SetBaseUrlAsync()
    {
        await App.SettingsHelper.SetAsync(SettingsHelper.BaseUrl, baseUrl);
        RequestHelper.Default = new RequestHelper(baseUrl);
    }

    private async Task ResetAsync()
    {
        flyout = false;
        await App.SettingsHelper.ResetAsync();
        await App.SettingsHelper.SetDefaultSettingsAsync();
        await OnParametersSetAsync();
    }
}
