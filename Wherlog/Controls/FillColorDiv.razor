@using Microsoft.FluentUI.AspNetCore.Components.Utilities
@inherits FluentComponentBase
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ILogger<FillColorDiv> Logger

<div id="@Id" class="@ClassValue" style="@Style" @ref="Element" @attributes="AdditionalAttributes">@ChildContent</div>

@code
{
    private const string JAVASCRIPT_FILE = $"./{nameof(Controls)}/{nameof(FillColorDiv)}.razor.js";

    private IJSObjectReference _jsModule;
    private bool _raiseContentConverted;

    protected string ClassValue => new CssBuilder(Class)
        .AddClass("fill-color-div")
        .Build();

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string FillColor { get; set; }

    private string fillColor;
    private void SetFillColor(string value)
    {
        if (fillColor != value)
        {
            fillColor = value;
            _raiseContentConverted = true;
        }
    }

    protected override void OnParametersSet() => SetFillColor(FillColor);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule ??= await JSRuntime.InvokeAsync<IJSObjectReference>("import", JAVASCRIPT_FILE);
        }

        if (_jsModule != null && _raiseContentConverted)
        {
            await _jsModule.InvokeVoidAsync("setFillColor", Element, FillColor);
            _raiseContentConverted = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_jsModule != null)
            {
                await _jsModule.DisposeAsync();
                _jsModule = null;
            }

            GC.SuppressFinalize(this);
        }
        catch (Exception ex) when (ex is JSDisconnectedException or
                                   OperationCanceledException)
        {
            // The JSRuntime side may routinely be gone already if the reason we're disposing is that
            // the client disconnected. This is not an error.
            Logger.LogWarning(ex, "JSRuntime has already disconnected. {message} (0x{hResult:X})", ex.GetMessage(), ex.HResult);
        }
    }
}
