@page "/tags/{slug?}"
@using Wherlog.Models.Cate
@using Wherlog.Models.Post
@inject IStringLocalizer<TagsPage> Loc
@inject NavigationManager Navigation

<ContentsView>
    @if (cate == null)
    {
        <PageHeader Title="@Loc["TitleText"]" />
        @if (!HasSlug && cates != null)
        {
            <FluentGrid Spacing="1">
                @foreach (var cate in cates)
                {
                    <FluentGridItem xs="6" sm="3">
                        <FluentCard Class="clickable-card"
                                    MinimalStyle="true"
                                    @onclick="() => OnClick(cate.Slug)"
                                    Style="cursor: pointer;">
                            <h4>@cate.Name</h4>
                        </FluentCard>
                    </FluentGridItem>
                }
            </FluentGrid>
        }
        else
        {
            <FluentCard Class="default-card" MinimalStyle="true">
                <FillColorDiv FillColor="neutralFillInputRest">
                    <FluentStack Orientation="Orientation.Vertical"
                                 HorizontalAlignment="HorizontalAlignment.Stretch"
                                 VerticalAlignment="VerticalAlignment.SpaceBetween">
                        <FluentSkeleton Width="38.1966%"
                                        Height="var(--type-ramp-plus-4-line-height)"
                                        Shimmer="true" />
                        <FluentSkeleton Width="100%"
                                        Shimmer="true"
                                        Style="min-height: 100px; flex: 1;" />
                    </FluentStack>
                </FillColorDiv>
            </FluentCard>
        }
    }
    else
    {
        <PageHeader Title="@string.Format(Loc["TitleTextFormat"], cate.Info.Name)" />
        <FluentStack Orientation="Orientation.Vertical">
            <Virtualize Items="cate.Posts" Context="post">
                <ItemContent>
                    <FluentCard Class="clickable-card" MinimalStyle="true">
                        <FillColorDiv FillColor="neutralFillInputRest">
                            <PostCard Post="post" />
                        </FillColorDiv>
                    </FluentCard>
                </ItemContent>
                <EmptyContent>
                    <FluentCard Class="default-card" MinimalStyle="true">
                        <FillColorDiv FillColor="neutralFillInputRest">
                            <FluentStack Orientation="Orientation.Vertical"
                                         HorizontalAlignment="HorizontalAlignment.Stretch"
                                         VerticalAlignment="VerticalAlignment.SpaceBetween">
                                <FluentSkeleton Width="50%"
                                                Height="var(--type-ramp-plus-4-line-height)"
                                                Shimmer="true" />
                                <FluentSkeleton Width="100%"
                                                Shimmer="true"
                                                Style="min-height: 100px; flex: 1;" />
                            </FluentStack>
                        </FillColorDiv>
                    </FluentCard>
                </EmptyContent>
                <Placeholder>
                    <FluentCard Class="default-card" MinimalStyle="true">
                        <FillColorDiv FillColor="neutralFillInputRest">
                            <FluentStack Orientation="Orientation.Vertical"
                                         HorizontalAlignment="HorizontalAlignment.Stretch"
                                         VerticalAlignment="VerticalAlignment.SpaceBetween">
                                <FluentSkeleton Width="50%"
                                                Height="var(--type-ramp-plus-4-line-height)"
                                                Shimmer="true" />
                                <FluentSkeleton Width="100%"
                                                Shimmer="true"
                                                Style="min-height: 100px; flex: 1;" />
                            </FluentStack>
                        </FillColorDiv>
                    </FluentCard>
                </Placeholder>
            </Virtualize>
        </FluentStack>
    }
</ContentsView>

@code
{
    private RequestHelper request = RequestHelper.Default;
    private CateDetailModel cate;

    private static CatesModel cates;
    private CatesModel Cates => cates;

    private bool HasSlug => !string.IsNullOrEmpty(Slug);

    [Parameter]
    public string Slug { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (HasSlug)
        {
            if (Array.Find(cates, x => x.Slug.Equals(Slug, StringComparison.OrdinalIgnoreCase) || x.Name.Equals(Slug, StringComparison.OrdinalIgnoreCase)) is CateIndexModel cateIndex)
            {
                cate = await request.GetAsync(cateIndex.Api, SourceGenerationContext.Default.EntryCateDetailModel).GetResults();
            }
            else
            {
                Navigation.NavigateTo($"tags");
            }
        }
        else
        {
            cate = null;
            cates ??= await request.GetCatesAsync(CateType.Tag).GetResults();
        }
    }

    private void OnClick(string path) => Navigation.NavigateTo($"tags/{path}");
}
