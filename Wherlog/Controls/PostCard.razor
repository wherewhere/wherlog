@using Wherlog.Models.Post
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@if (Post != null)
{
    <div class="post-card" @onclick="() => OnClick(Post.Url)">
        <h3>@Post.Title</h3>
        @(new MarkupString(Post.Excerpt))
    </div>
}

@code
{
    private const string JAVASCRIPT_FILE = $"./{nameof(Controls)}/{nameof(PostCard)}.razor.js";

    private IJSObjectReference _jsModule;

    [Parameter]
    public PostModel Post { get; set; }

    private void OnClick(string path) => Navigation.NavigateTo($"posts/{path}");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // add highlight for any code blocks
            _jsModule ??= await JSRuntime.InvokeAsync<IJSObjectReference>("import", JAVASCRIPT_FILE);
            await _jsModule.InvokeVoidAsync("highlight");
            await _jsModule.InvokeVoidAsync("fixEmoji");
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_jsModule != null)
            {
                await _jsModule.DisposeAsync();
                _jsModule = null;
            }

            GC.SuppressFinalize(this);
        }
        catch (Exception ex) when (ex is JSDisconnectedException or
                                   OperationCanceledException)
        {
            // The JSRuntime side may routinely be gone already if the reason we're disposing is that
            // the client disconnected. This is not an error.
        }
    }
}
