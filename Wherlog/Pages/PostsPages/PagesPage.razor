@page "/pages/{*path}"
@using Wherlog.Models
@using Wherlog.Models.Page
@inject IStringLocalizer<PagesPage> Loc
@inject NavigationManager Navigation

@if (pageModel == null)
{
    <ContentsView>
        @if (HasPath)
        {
            <PageHeader Title="@Loc["TitleText"]" />
            <FluentStack Orientation="Orientation.Vertical"
                         HorizontalAlignment="HorizontalAlignment.Stretch"
                         VerticalAlignment="VerticalAlignment.SpaceBetween">
                <FluentSkeleton Width="38.1966%"
                                Height="var(--type-ramp-plus-4-line-height)"
                                Shimmer="true" />
                <FluentSkeleton Width="100%"
                                Shimmer="true"
                                Style="min-height: 100px; flex: 1;" />
            </FluentStack>
        }
        else if (pages != null)
        {
            <PageHeader Title="@Loc["TitleText"]" Description="@string.Format(Loc["PageDescription"], pages.Length)" />
            <FluentStack Orientation="Orientation.Vertical">
                <Virtualize Items="pages" Context="model">
                    <ItemContent>
                        <FluentCard Class="clickable-card"
                                    MinimalStyle="true"
                                    @onclick="() => OnClick(model.Url)"
                                    Style="cursor: pointer;">
                            <div lang="@model.Language">
                                <h4>@model.Title</h4>
                                @if (!string.IsNullOrEmpty(model.Description))
                                {
                                    <span>@model.Description</span>
                                }
                            </div>
                        </FluentCard>
                    </ItemContent>
                    <EmptyContent>
                        <FluentCard Class="default-card" MinimalStyle="true">
                            <FillColorDiv FillColor="neutralFillInputRest">
                                <FluentStack Orientation="Orientation.Vertical"
                                             HorizontalAlignment="HorizontalAlignment.Stretch"
                                             VerticalAlignment="VerticalAlignment.SpaceBetween">
                                    <FluentSkeleton Width="50%"
                                                    Height="var(--type-ramp-plus-4-line-height)"
                                                    Shimmer="true" />
                                    <FluentSkeleton Width="100%"
                                                    Shimmer="true"
                                                    Style="min-height: 100px; flex: 1;" />
                                </FluentStack>
                            </FillColorDiv>
                        </FluentCard>
                    </EmptyContent>
                    <Placeholder>
                        <FluentCard Class="default-card" MinimalStyle="true">
                            <FillColorDiv FillColor="neutralFillInputRest">
                                <FluentStack Orientation="Orientation.Vertical"
                                             HorizontalAlignment="HorizontalAlignment.Stretch"
                                             VerticalAlignment="VerticalAlignment.SpaceBetween">
                                    <FluentSkeleton Width="50%"
                                                    Height="var(--type-ramp-plus-4-line-height)"
                                                    Shimmer="true" />
                                    <FluentSkeleton Width="100%"
                                                    Shimmer="true"
                                                    Style="min-height: 100px; flex: 1;" />
                                </FluentStack>
                            </FillColorDiv>
                        </FluentCard>
                    </Placeholder>
                </Virtualize>
            </FluentStack>
        }
    </ContentsView>
}
else
{
    <PageTitle>@pageModel.Title</PageTitle>
    <PageDescription Content="@pageModel.Description" />
    <PostDetailCard Post="pageModel" />
    @if (Path == "api")
    {
        <style>
            hgroup.main {
                display: unset;
            }
        </style>
    }
}

@code
{
    private RequestHelper request = RequestHelper.Default;
    private PageDetailModel pageModel;
    private PagesModel pages;

    private bool HasPath => !string.IsNullOrEmpty(Path);

    [Parameter]
    public string Path { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        pages ??= await request.GetPagesAsync().GetResults();

        pageModel = null;
        if (HasPath)
        {
            if (Array.Find(pages, x => x.Url.Replace("/index.html", string.Empty).TrimStart('/').Contains(Path)) is PageModel page)
            {
                pageModel = await request.GetAsync(page.Api, SourceGenerationContext.Default.EntryPageDetailModel).GetResults();
            }
            else
            {
                Navigation.NavigateTo("pages");
            }
        }
    }

    private void OnClick(string path) => Navigation.NavigateTo($"pages/{path.Replace("/index.html", string.Empty).TrimStart('/')}");
}
