@page "/tools/encoding"
@page "/tools/encode"
@page "/tools/decode"
@using System.Net
@using System.Text
@using System.Text.RegularExpressions
@inject IStringLocalizer<EncodePage> Loc

<TableContentsView>
    <PageHeader Title="@Loc["TitleText"]" />

    <FluentStack Orientation="Orientation.Vertical">
        <SettingsGroup>
            <SettingsCard>
                <Icon>
                    <FluentIcon Value="new Icons.Regular.Size20.SettingsCogMultiple()" />
                </Icon>
                <Header>
                    <h3 id="encode-type" class="unset">@Loc["TypeSettingsHeader"]</h3>
                </Header>
                <Description>
                    @Loc["TypeSettingsDescription"]
                </Description>
                <ActionContent>
                    <FluentSelect Items="@(Enum.GetValues<EncodeType>())"
                                  @bind-SelectedOption="type"
                                  Style="min-width: calc(var(--base-height-multiplier) * 12.5px);" />
                </ActionContent>
            </SettingsCard>

            <FluentSplitter>
                <Panel1>
                    <InputLabel Label="@Loc["DecodedLabel"]" Style="padding-right: 0.15rem;">
                        <ActionContent>
                            <FluentButton OnClick="Encode">@Loc["DecodedButton"]</FluentButton>
                        </ActionContent>
                        <ChildContent>
                            <FluentTextArea @bind-Value="decode"
                                            Resize="TextAreaResize.Vertical"
                                            Style="width: 100%;" />
                        </ChildContent>
                    </InputLabel>
                </Panel1>
                <Panel2>
                    <InputLabel Label="@Loc["EncodedLabel"]" Style="padding-left: 0.15rem;">
                        <ActionContent>
                            <FluentButton OnClick="Decode">@Loc["EncodedButton"]</FluentButton>
                        </ActionContent>
                        <ChildContent>
                            <FluentTextArea @bind-Value="encode"
                                            Resize="TextAreaResize.Vertical"
                                            Style="width: 100%;" />
                        </ChildContent>
                    </InputLabel>
                </Panel2>
            </FluentSplitter>
        </SettingsGroup>
    </FluentStack>
</TableContentsView>

@code
{
    enum EncodeType
    {
        Base64,
        URL,
        HTML,
        Unicode
    }

    private EncodeType type;
    private string encode = string.Empty;
    private string decode = string.Empty;

    private void Encode()
    {
        switch (type)
        {
            case EncodeType.Base64:
                encode = Convert.ToBase64String(Encoding.UTF8.GetBytes(decode));
                break;
            case EncodeType.URL:
                encode = WebUtility.UrlEncode(decode);
                break;
            case EncodeType.HTML:
                encode = WebUtility.HtmlEncode(decode);
                break;
            case EncodeType.Unicode:
                encode = EncodeUnicode(decode);
                break;
        }
    }

    private void Decode()
    {
        switch (type)
        {
            case EncodeType.Base64:
                decode = DecodeBase64(encode);
                break;
            case EncodeType.URL:
                decode = WebUtility.UrlDecode(encode);
                break;
            case EncodeType.HTML:
                decode = WebUtility.HtmlDecode(encode);
                break;
            case EncodeType.Unicode:
                decode = Regex.Unescape(encode);
                break;
        }
    }

    private static string DecodeBase64(string text)
    {
        int index = text.Length % 4;
        byte[] bytes = Convert.FromBase64String(index == 0 ? text : $"{text}{new string(System.Linq.Enumerable.Repeat('=', 4 - index).ToArray())}");
        return Encoding.UTF8.GetString(bytes);
    }

    private static string EncodeUnicode(string text)
    {
        StringBuilder builder = new StringBuilder();
        foreach (char c in text)
        {
            _ = builder.Append($@"\u{(ushort)c:x4}");
        }
        return builder.ToString();
    }
}
