@page "/tools/datetime"
@page "/tools/timestamp"
@inject IStringLocalizer<DateTimePage> Loc

<ContentsView>
    <PageHeader Title="@Loc["TitleText"]" />

    <FluentCard AreaRestricted="false" Style="height: auto; padding: 16px;">
        <FluentStack Orientation="Orientation.Vertical">
            <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
                <FluentNumberField @bind-Value="timeStamp" Style="flex: 1;" />
                <FluentButton OnClick="ConvertTimeStamp">@Loc[nameof(ConvertTimeStamp)]</FluentButton>
            </FluentStack>

            <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
                <FluentDatePicker @bind-Value="dateTime" Style="flex: 1;" />
                <FluentTimePicker @bind-Value="dateTime" />
                <FluentButton OnClick="ConvertDateTime">@Loc[nameof(ConvertDateTime)]</FluentButton>
            </FluentStack>

            <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
                <FluentTextField @bind-Value="timeString"
                                 Placeholder="2022-02-22T22:22:22+08:00"
                                 Style="flex: 1;" />
                <FluentButton OnClick="ConvertTimeString">@Loc[nameof(ConvertTimeString)]</FluentButton>
            </FluentStack>

            <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
                <FluentButton OnClick="SetDateTimeNow">@Loc[nameof(SetDateTimeNow)]</FluentButton>
                <FluentSwitch @bind-Value="IsMillisecond">@Loc[nameof(IsMillisecond)]</FluentSwitch>
            </FluentStack>
        </FluentStack>
    </FluentCard>
</ContentsView>

@code
{
    private DateTime? dateTime = DateTime.Now;
    private long timeStamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
    private string timeString = DateTime.Now.ToString("s");

    private bool isMillisecond = false;
    public bool IsMillisecond
    {
        get => isMillisecond;
        set
        {
            if (isMillisecond != value)
            {
                timeStamp = isMillisecond ? this.timeStamp / 1000 : this.timeStamp * 1000;
                isMillisecond = value;
            }
        }
    }

    private void ConvertTimeStamp()
    {
        dateTime = isMillisecond
            ? DateTimeOffset.FromUnixTimeMilliseconds(timeStamp).LocalDateTime
            : DateTimeOffset.FromUnixTimeSeconds(timeStamp).LocalDateTime;
        timeString = dateTime?.ToString("s");
    }

    private void ConvertDateTime()
    {
        DateTimeOffset offset = (DateTimeOffset)dateTime;
        timeStamp = isMillisecond
            ? offset.ToUnixTimeMilliseconds()
            : offset.ToUnixTimeSeconds();
        timeString = dateTime?.ToString("s");
    }

    private void ConvertTimeString()
    {
        if (DateTimeOffset.TryParse(timeString, out DateTimeOffset dateTimeOffset))
        {
            dateTime = dateTimeOffset.LocalDateTime;
            timeStamp = isMillisecond
                ? dateTimeOffset.ToUnixTimeMilliseconds()
                : dateTimeOffset.ToUnixTimeSeconds();
        }
    }

    private void SetDateTimeNow()
    {
        dateTime = DateTime.Now;
        timeStamp = isMillisecond
            ? DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()
            : DateTimeOffset.UtcNow.ToUnixTimeSeconds();
        timeString = DateTime.Now.ToString("s");
    }
}
