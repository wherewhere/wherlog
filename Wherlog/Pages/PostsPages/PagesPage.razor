@page "/pages/{*path}"
@using Wherlog.Helpers
@using Wherlog.Models
@using Wherlog.Models.Page
@inject IStringLocalizer<PagesPage> Loc
@inject NavigationManager Navigation

@if (pageModel == null)
{
    <ContentsView>
        <Content>
            <PageHeader Title="@Loc["TitleText"]" />
            @if (HasPath)
            {
                <FluentProgressRing />
            }
            else if (pages != null)
            {
                <FluentStack Orientation="Orientation.Vertical">
                    @foreach (PageModel model in pages)
                    {
                        <FluentCard @onclick="() => OnClick(model.Url)" Style="cursor: pointer;">
                            <h4>@model.Title</h4>
                        </FluentCard>
                    }
                </FluentStack>
            }
        </Content>
    </ContentsView>
}
else
{
    <PageTitle>@pageModel.Title</PageTitle>
    <PostDetailCard Post="pageModel" />
    @if (Path == "api")
    {
        <style>
            hgroup.main {
                display: unset;
            }
        </style>
    }
}

@code
{
    private RequestHelper request = RequestHelper.Default;
    private PageDetailModel pageModel;
    private PagesModel pages;

    private bool HasPath => !string.IsNullOrEmpty(Path);

    [Parameter]
    public string Path { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        pages ??= await request.GetPagesAsync().GetResults();

        pageModel = null;
        if (HasPath)
        {
            if (Array.Find(pages, x => x.Url.Replace("/index.html", string.Empty).TrimStart('/').Contains(Path)) is PageModel page)
            {
                pageModel = await request.GetAsync(page.Api, SourceGenerationContext.Default.EntryPageDetailModel).GetResults();
            }
            else
            {
                Navigation.NavigateTo("pages");
            }
        }
    }

    private void OnClick(string path) => Navigation.NavigateTo($"pages/{path.Replace("/index.html", string.Empty).TrimStart('/')}");
}
