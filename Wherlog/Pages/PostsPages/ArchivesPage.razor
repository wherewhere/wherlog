@page "/archives/{year:int?}/{month:int?}"
@page "/posts/{year:int}/{month:int?}"
@using Wherlog.Models
@using Wherlog.Models.Archive
@using Wherlog.Models.Post
@inject IStringLocalizer<ArchivesPage> Loc
@inject NavigationManager Navigation

<PageTitle>@Loc["TitleText"]</PageTitle>

<div class="archives-page">
    <article>
        <h1>
            @if (Year == null)
            {
                @Loc["TitleText"]
            }
            else
            {
                @string.Format(Loc["TitleTextFormat"], $"{Year}{(Month == null ? string.Empty : $".{Month}")}")
            }
        </h1>
        @if (archive == null)
        {
            @if (view == CalendarViews.Years)
            {
                <FluentStack Orientation="Orientation.Vertical">
                    <Virtualize Items="PostList" Context="post">
                        <ItemContent>
                            <FluentCard Class="clickable-card" MinimalStyle="true">
                                <FillColorDiv FillColor="neutralFillInputRest">
                                    <PostCard Post="post" />
                                </FillColorDiv>
                            </FluentCard>
                        </ItemContent>
                        <EmptyContent>
                            <FluentCard Class="default-card" MinimalStyle="true">
                                <FillColorDiv FillColor="neutralFillInputRest">
                                    <FluentStack Orientation="Orientation.Vertical"
                                                 HorizontalAlignment="HorizontalAlignment.Stretch"
                                                 VerticalAlignment="VerticalAlignment.SpaceBetween">
                                        <FluentSkeleton Width="38.1966%"
                                                        Height="var(--type-ramp-plus-4-line-height)"
                                                        Shimmer="true" />
                                        <FluentSkeleton Width="100%"
                                                        Shimmer="true"
                                                        Style="min-height: 100px; flex: 1;" />
                                    </FluentStack>
                                </FillColorDiv>
                            </FluentCard>
                        </EmptyContent>
                        <Placeholder>
                            <FluentCard Class="default-card" MinimalStyle="true">
                                <FillColorDiv FillColor="neutralFillInputRest">
                                    <FluentStack Orientation="Orientation.Vertical"
                                                 HorizontalAlignment="HorizontalAlignment.Stretch"
                                                 VerticalAlignment="VerticalAlignment.SpaceBetween">
                                        <FluentSkeleton Width="50%"
                                                        Height="var(--type-ramp-plus-4-line-height)"
                                                        Shimmer="true" />
                                        <FluentSkeleton Width="100%"
                                                        Shimmer="true"
                                                        Style="min-height: 100px; flex: 1;" />
                                    </FluentStack>
                                </FillColorDiv>
                            </FluentCard>
                        </Placeholder>
                    </Virtualize>
                </FluentStack>
            }
            else
            {
                <FluentCard Class="default-card" MinimalStyle="true">
                    <FillColorDiv FillColor="neutralFillInputRest">
                        <FluentStack Orientation="Orientation.Vertical"
                                     HorizontalAlignment="HorizontalAlignment.Stretch"
                                     VerticalAlignment="VerticalAlignment.SpaceBetween">
                            <FluentSkeleton Width="38.1966%"
                                            Height="var(--type-ramp-plus-4-line-height)"
                                            Shimmer="true" />
                            <FluentSkeleton Width="100%"
                                            Shimmer="true"
                                            Style="min-height: 100px; flex: 1;" />
                        </FluentStack>
                    </FillColorDiv>
                </FluentCard>
            }
        }
        else
        {
            <FluentStack Orientation="Orientation.Vertical">
                <Virtualize Items="archive.Posts" Context="post">
                    <ItemContent>
                        <FluentCard Class="clickable-card" MinimalStyle="true">
                            <FillColorDiv FillColor="neutralFillInputRest">
                                <PostCard Post="post" />
                            </FillColorDiv>
                        </FluentCard>
                    </ItemContent>
                    <EmptyContent>
                        <FluentCard Class="default-card" MinimalStyle="true">
                            <FillColorDiv FillColor="neutralFillInputRest">
                                <FluentStack Orientation="Orientation.Vertical"
                                             HorizontalAlignment="HorizontalAlignment.Stretch"
                                             VerticalAlignment="VerticalAlignment.SpaceBetween">
                                    <FluentSkeleton Width="50%"
                                                    Height="var(--type-ramp-plus-4-line-height)"
                                                    Shimmer="true" />
                                    <FluentSkeleton Width="100%"
                                                    Shimmer="true"
                                                    Style="min-height: 100px; flex: 1;" />
                                </FluentStack>
                            </FillColorDiv>
                        </FluentCard>
                    </EmptyContent>
                    <Placeholder>
                        <FluentCard Class="default-card" MinimalStyle="true">
                            <FillColorDiv FillColor="neutralFillInputRest">
                                <FluentStack Orientation="Orientation.Vertical"
                                             HorizontalAlignment="HorizontalAlignment.Stretch"
                                             VerticalAlignment="VerticalAlignment.SpaceBetween">
                                    <FluentSkeleton Width="50%"
                                                    Height="var(--type-ramp-plus-4-line-height)"
                                                    Shimmer="true" />
                                    <FluentSkeleton Width="100%"
                                                    Shimmer="true"
                                                    Style="min-height: 100px; flex: 1;" />
                                </FluentStack>
                            </FillColorDiv>
                        </FluentCard>
                    </Placeholder>
                </Virtualize>
            </FluentStack>
        }
    </article>

    @if (archives != null)
    {
        <aside>
            @if (useCalendar)
            {
                <FluentCard Height="auto"
                            Width="auto"
                            Style="display: flex; align-items: center; justify-content: center;">
                    <FluentCalendar View="view"
                                    Value="date"
                                    DisabledDateFunc="DisableDateTime"
                                    ValueChanged="OnValueChanged" />
                </FluentCard>
            }
            else
            {
                <FluentCard Height="auto"
                            Width="auto"
                            Style="padding: calc(var(--design-unit) * 2px);">
                    <FluentTreeView CurrentSelectedChanged="OnCurrentSelectedChanged">
                        @foreach (YearModel year in archives)
                        {
                            <FluentTreeItem Data="year.Year"
                                            Expanded="year.Year == Year"
                                            InitiallySelected="Month == null && year.Year == Year">
                                @string.Format(Loc["YearText"], year.Year)
                                @foreach (MonthModel month in year.Data)
                                {
                                    <FluentTreeItem Data="(year.Year, month.Month)" InitiallySelected="year.Year == Year && month.Month == Month">
                                        @string.Format(Loc["MonthText"], month.Month)
                                    </FluentTreeItem>
                                }
                            </FluentTreeItem>
                        }
                    </FluentTreeView>
                </FluentCard>
            }
        </aside>
    }
</div>

@code
{
    private RequestHelper request = RequestHelper.Default;
    private static ArchivesModel archives;
    private static bool useCalendar;
    private IArchiveDetail<InfoModel> archive;
    private CalendarViews view = CalendarViews.Years;
    private DateTime? date = null;
    private bool isLoading = true;

    [Parameter]
    public int? Year { get; set; }

    [Parameter]
    public int? Month { get; set; }

    private List<PostModel> PostList
    {
        get
        {
            List<PostModel> postList = HomePage.PostList;
            if (postList.Count <= 0)
            {
                _ = InitializePostListAsync(postList);
            }
            return postList;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        useCalendar = await App.SettingsHelper.GetAsync<bool>(SettingsHelper.UseCalendarArchive);

        archives ??= await request.GetArchivesAsync().GetResults();

        archive = null;
        if (Year is int year)
        {
            if (Array.Find(archives, x => x.Year == year) is YearModel yearModel)
            {
                if (Month is int month)
                {
                    if (Array.Find(yearModel.Data, x => x.Month == month) is MonthModel monthModel)
                    {
                        archive = await request.GetAsync(monthModel.Api, SourceGenerationContext.Default.EntryArchiveDetailModelMonthInfo).GetResults();
                        view = CalendarViews.Days;
                        if (archive is { Posts: [{ Date: DateTimeOffset offset }, ..] })
                        {
                            date = offset.LocalDateTime;
                        }
                    }
                    else
                    {
                        Navigation.NavigateTo($"archives/{year}");
                    }
                }
                else
                {
                    archive = await request.GetAsync(yearModel.Api, SourceGenerationContext.Default.EntryArchiveDetailModelYearInfo).GetResults();
                    view = CalendarViews.Months;
                    if (archive is { Posts: [{ Date: DateTimeOffset offset }, ..] })
                    {
                        date = offset.LocalDateTime;
                    }
                }
            }
            else
            {
                Navigation.NavigateTo("archives");
            }
        }

        isLoading = false;
    }

    private bool DisableDateTime(DateTime date)
    {
        if (archives != null)
        {
            DateTime @default = default;
            if (Array.Find(archives, x => x.Year == date.Year) is YearModel yearModel)
            {
                if (date.Month != @default.Month)
                {
                    if (Array.Find(yearModel.Data, x => x.Month == date.Month) is MonthModel monthModel)
                    {
                        if (date.Day != @default.Day && archive != null)
                        {
                            if (Array.Exists(archive.Posts, x =>
                            {
                                DateTime time = x.Date.LocalDateTime;
                                return time.Year == date.Year && time.Month == date.Month && time.Day == date.Day;
                            }))
                            {
                                return false;
                            }
                            return true;
                        }
                        return false;
                    }
                    return true;
                }
                return false;
            }
            return true;
        }
        return false;
    }

    private void OnValueChanged(DateTime? date)
    {
        if (!isLoading && date is DateTime dateTime)
        {
            switch (view)
            {
                case CalendarViews.Years:
                    Navigation.NavigateTo($"archives/{dateTime.Year}");
                    break;
                case CalendarViews.Months:
                    Navigation.NavigateTo($"archives/{dateTime.Year}/{dateTime.Month:D2}");
                    break;
            }
        }
    }

    private void OnCurrentSelectedChanged(FluentTreeItem item)
    {
        if (isLoading) { return; }
        switch (item.Data)
        {
            case int year:
                Navigation.NavigateTo($"archives/{year}");
                break;
            case (int year, int month):
                Navigation.NavigateTo($"archives/{year}/{month:D2}");
                break;
        }
    }

    private async Task InitializePostListAsync(List<PostModel> postList)
    {
        RequestHelper request = RequestHelper.Default;
        PostsModel postsIndex = await request.GetPostsAsync().GetResults();
        foreach (IndexModel<InfoModel> index in postsIndex.Pages)
        {
            PostsIndexModel indexModel = await request.GetAsync(index.Api, SourceGenerationContext.Default.EntryPostsIndexModel).GetResults();
            if (indexModel?.Posts?.Length > 0)
            {
                postList.AddRange(indexModel.Posts);
            }
        }
        StateHasChanged();
    }
}
