@using Wherlog.Models.Post
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ILogger<PostCard> Logger
@inject NavigationManager Navigation

@if (Post != null)
{
    <article itemscope
             itemtype="http://schema.org/Article"
             class="post-card"
             lang="@Post.Language"
             @onclick="() => OnClick(Post.Url)"
             @ref="content">
        <header class="post-header">
            <h2 class="post-title" itemprop="name headline">@Post.Title</h2>
            <div class="post-meta-container">
                <PostMeta Post="Post"></PostMeta>
            </div>
        </header>
        <div itemprop="articleBody">
            @(new MarkupString(Post.Excerpt))
        </div>
    </article>
}

@code
{
    private const string JAVASCRIPT_FILE = $"./{nameof(Controls)}/{nameof(PostCard)}.razor.js";

    private IJSObjectReference _jsModule;
    private ElementReference content;

    [Parameter]
    public PostModel Post { get; set; }

    private void OnClick(string path) => Navigation.NavigateTo($"posts/{path}");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // add highlight for any code blocks
        _jsModule ??= await JSRuntime.InvokeAsync<IJSObjectReference>("import", JAVASCRIPT_FILE);
        await _jsModule.InvokeVoidAsync("highlight", content);
        await _jsModule.InvokeVoidAsync("fixImage", content);
        await _jsModule.InvokeVoidAsync("setTheme", content);
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_jsModule != null)
            {
                await _jsModule.DisposeAsync();
                _jsModule = null;
            }

            GC.SuppressFinalize(this);
        }
        catch (Exception ex) when (ex is JSDisconnectedException or
                                   OperationCanceledException)
        {
            // The JSRuntime side may routinely be gone already if the reason we're disposing is that
            // the client disconnected. This is not an error.
            Logger.LogWarning(ex, "JSRuntime has already disconnected. {message} (0x{hResult:X})", ex.GetMessage(), ex.HResult);
        }
    }
}
